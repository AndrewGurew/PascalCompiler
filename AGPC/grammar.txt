program ::= {head} block DOT
identifierList ::= identifier {COMMA identifier}
head ::= program identifier {identifierList} SEMI
identifier ::= letter {letter-sequence|number-sequence|'_'} 

letter-sequence ::= letter {letter}
number-sequence ::= number {number}

block ::= {constantDecl-part | varDecl-part | typeDecl-part | procedureAndFunctionDecl-part | forwardProcFuncDecl} compoundStatement

typeDecl-part ::= TYPE typeDecl
typeDecl ::= identifier EQUAL type
type ::= simpleType | arrayType | recordType

procedureAndFunctionDecl-part ::= procedureOrFunctionDecl SEMI
procedureOrFunctionDecl ::= procedureDeclaration | functionDeclaration
procedureDecl ::= PROCEDURE identifier [parameterList] SEMI (block | forward)
parameterList ::= LPAREN parameterList [SEMI parameterList] RPAREN
parameterList ::= identifierList COLON simpleType

functionDecl ::= FUNCTION identifier [parameterList] COLON returnType SEMI (block | forward)
returnType := simpleType

simpleType ::= INT | DOUBLE
arrayType ::= ARRAY RSQR_BRACKET expression D_DOT expression LSQR_BRACKET OF type

recordType ::= RECORD fieldList END
fieldList  ::= recordSection {recordSection}
recordSection ::= identifierList COLON type SEMI
   

constantDecl-part ::= CONST constantDecl
constantDecl ::= identifier EQUAL constant
constant ::= expression | constNumber
constNumber ::= unsignInteger | unsignDouble

varDecl-part ::= VAR varDecl
varDecl ::= varDef {varDef}
varDef ::= identifierList COLON type SEMI

unsignInteger ::== number-sequence ('.' number-sequence 'e' number-sequence) | ('e' number-sequence)
unsignDouble ::= number-sequence '.' number-sequence

expression ::= simple expression {(<=|>=|=|<|>) simple expression}
simple expression ::= term {(+|-|OR) term}
term ::= factor {(*|/|AND) factor} 
factor ::= (LEFT_BRACKET expression RIGHT_BRACKET) | identifier | constNumber | functionDesignator

functionDesignator ::= identifier LPAREN [callParList] RPAREN

statement ::=  whileStatement | repeatStatement | forStatement | ifStatement | assignStatement | compoundStatement | procedureCall
procedureCall ::= identifier LEFT_BRACKET [callParList] RIGHT_BRACKET SEMI
callParList ::= expression {COMMA expression}

statements ::= statement {statement}
compoundStatement ::= BEGIN statements END

whileStatement ::= WHILE expression DO statement
repeatStatement :: REPEAT statements UNTIL expression
forStatement ::= FOR identifier ASSIGN expression (TO | DOWNTO) expression DO statement
ifStatement ::= IF expression THEN statement { ELSE statement }
assigStatement ::= identifier ASSIGN expression

SEMI ::= ';'
COLON ::= ':'
DOT ::= '.'
LEFT_BRACKET ::= '('
RIGHT_BRACKET ::= ')'

